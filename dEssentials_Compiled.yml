# |------------------------------------
# | D E N I Z E N   E S S E N T I A L S
# |
# | Essentials rewritten in Denizen!
# | dEssentials: Things a servers needs in one easy package!
# | -----------------------------------
#
# @author mcmonkey
# @version 0.1
# @denizen-version 0.9.6
# @denizen-build 1551
# @date 2015-01-01
#
# @recommended dWorldEditor Coming Soon
# @recommended dRegions Coming Soon
# @recommended dSentry http://mcmonkey.org/denizen/repo/entry/0
#
# Installation:
# Just drop it in your scripts folder and reload :D
#
# Usage:
# Use similarly to essentials.
#
# Ignoring:
# We are not replacing /xp, /weather, /give ... at this time
# because Minecraft provides sufficient default commands.
#
# Commands/Permissions:
# /name     -> short description            -> permission
# ---------------------- Core        -------------------------------------------
# ---------------------- Teleporting -------------------------------------------
# /spawn    -> warp to the world spawn      -> denizen.essentials.user.spawn
# /setspawn -> set the world spawn point    -> denizen.essentials.admin.setspawn
# /warp     -> warp to a teleport point     -> denizen.essentials.user.warp
# /setwarp  -> set a teleport point         -> denizen.essentials.admin.setwarp
# ---------------------- Items       -------------------------------------------
# /itemdb   -> shows information on an item -> denizen.essentials.user.itemdb
# /item     -> gives an item to the player  -> denizen.essentials.admin.item
# /invsee   -> shows a player's inventory   -> denizen.essentials.admin.invsee
# /endersee -> shows a player's enderchest  -> denizen.essentials.admin.endersee
# ---------------------- Control     -------------------------------------------
# /time     -> sets the world's time        -> denizen.essentials.admin.time
# /speed    -> sets a player's speed        -> denizen.essentials.admin.speed
# ---------------------- Core        -------------------------------------------
# sign coloring                             -> denizen.essentials.utility.signcolor
# chat coloring                             -> denizen.essentials.utility.chatcolor
#
# ------------------------------------------------------------------------------

placeholder:
    type: yaml data
    description: This is here so the YAML file doesn't show an error for being empty.
                 This file will eventually be used for 'core' commands, if any are chosen.
# dEssentials: Things a servers needs in one easy package!
# --- CONTROL: Commands to control server information.
# See dEssentials-Core.yml for information

dessentials_command_time:
    type: command
    debug: false
    name: time
    description: Sets the world's time.
    usage: /time <&lt>time<&gt> [world]
    permission: denizen.essentials.admin.time
    script:
    - if <context.server> && <context.args.size> != 2 {
      - narrate "<&c>This command is for players only."
      - narrate "<&c>Available for the server<&co> /time <&lt>time<&gt> <&lt>world<&gt>"
      - queue clear
      }
    - if <context.args.size> == 0 {
      - narrate "<&c>/time <&lt>time<&gt> [world]"
      - define hour <player.world.time.div[1000].add[6].round>
      - if <def[hour]> >= 24 {
        - define hour <def[hour].sub[24]>
        }
      - narrate "<&2>Time in <&b><player.world.name><&2> is <&b><player.world.time>ticks<&2> (<&b><def[hour]> o' clock<&2>)."
      - queue clear
      }
    - define world <player.world>
    - if <context.args.size> == 2 {
      - define world w@<context.args.get[2]>
      }
    - if <def[world].name||null> == null {
      - narrate "<&c>Unknown world."
      - queue clear
      }
    - define time <context.args.get[1]>
    - if <def[time].is[==].to[day]> {
      - adjust <def[world]> time:0
      }
      else if <def[time].is[==].to[night]> {
      - adjust <def[world]> time:15000
      }
      else if <def[time].is[==].to[dawn]> {
      - adjust <def[world]> time:23000
      }
      else if <def[time].is[==].to[dusk]> {
      - adjust <def[world]> time:13000
      }
      else if <def[time].contains[<&co>]> {
      - adjust <def[world]> time:<def[time].before[<&co>].sub[6].mul[1000].add[<def[time].after[<&co>].mul[16.666]>]>
      }
      else if <def[time].ends_with[ticks]> {
      - adjust <def[world]> time:<def[time].before[ticks]>
      }
      else {
      - adjust <def[world]> time:<def[time].sub[6].mul[1000]>
      }
    - define hour <player.world.time.div[1000].add[6].round>
    - if <def[hour]> >= 24 {
      - define hour <def[hour].sub[24]>
      }
    - narrate "<&2>Set time in <&b><def[world].name><&2> to <&b><def[world].time>ticks<&2> (<&b><def[hour]> o' clock<&2>)."

dessentials_command_speed:
    type: command
    debug: false
    name: speed
    description: Sets the player's speed.
    usage: /speed <&lt>speed<&gt>
    permission: denizen.essentials.admin.speed
    script:
    # TODO: / speed <speed> <player>
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - if <context.args.size> == 0 {
      - narrate "<&c>/speed <&lt>speed<&gt>"
      - queue clear
      }
    - define speed <context.args.get[1].escaped.replace[&dot].with[.]>
    - if <player.is_flying> {
      - define type fly
      }
      else {
      - define type walk
      }
    - adjust <player> <def[type]>_speed:<def[speed]>
    # TODO: remove the %type% nonsense cheatery
    - narrate "<&2>Player <&b><def[type]> <&2>speed set to <&b><player.%type%_speed><&2>."
# dEssentials: Things a servers needs in one easy package!
# --- ITEMS: Commands related to the item system.
# See dEssentials-Core.yml for information

dessentials_command_itemdb:
    type: command
    debug: false
    name: itemdb
    description: Shows information on the held item, or a specified item.
    usage: /itemdb [item]
    permission: denizen.essentials.user.itemdb
    script:
    - if <context.server> && <context.args.size> != 1 {
      - narrate "<&c>This command is for players only."
      - narrate "<&c>Available for the server<&co> /itemdb <&lt>item<&gt>"
      - queue clear
      }
    - define item <player.item_in_hand>
    - if <context.args.size> == 1 {
      - define item i@<context.args.get[1]>
      }
    - if <def[item].is[==].to[null]> || <def[item].material.name||null> == null {
      - narrate "<&c>Unknown item."
      - queue clear
      }
    - narrate "<&6>Item<&f><&co> <&b><def[item].material.name>"
    - narrate "<&6>Internal name<&f><&co> <&b><def[item].material.bukkit_enum>"
    - narrate "<&6>Full Denizen descriptor<&f><&co> <&b><def[item]>"
    - narrate "<&6>Data values<&f><&co> <&b><def[item].id><&f><&co><&b><def[item].data>"

dessentials_command_item:
    type: command
    debug: false
    name: item
    description: Gives an item.
    usage: /item <&lt>item<&gt>
    permission: denizen.essentials.admin.item
    aliases:
    - i
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - if <context.args.size> < 1 {
      - narrate "<&c>/item <&lt>item<&gt>"
      - queue clear
      }
    - define item "i@<context.raw_args>"
    - if <def[item].material.name||null> == null {
      - narrate "<&c>Unknown item."
      - queue clear
      }
    - adjust <def[item]> quantity:1 save:myitem
    - narrate "<&2>Giving <&b><def[item].qty><&2> of <&b><entry[myitem].result><&2>."
    - give <def[item]>

dessentials_command_invsee:
    type: command
    debug: false
    name: invsee
    description: Shows the inventory of another player.
    usage: /invess <&lt>player<&gt>
    permission: denizen.essentials.admin.invsee
    script:
    # TODO
    - narrate "This command is a stub."

dessentials_command_endersee:
    type: command
    debug: false
    name: endersee
    description: Shows the enderchest of another player.
    usage: /endersee <&lt>player<&gt>
    permission: denizen.essentials.admin.endersee
    script:
    # TODO
    - narrate "This command is a stub."
# dEssentials: Things a servers needs in one easy package!
# --- TELEPORTING: Commands related to teleportation.
# See dEssentials-Core.yml for information

dessentials_command_spawn:
    type: command
    debug: false
    name: spawn
    description: Teleports you to the current world's spawn point.
    usage: /spawn
    permission: denizen.essentials.user.spawn
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - teleport <player> <player.world.spawn_location>

dessentials_command_setspawn:
    type: command
    debug: false
    name: setspawn
    description: Sets the current world's spawn point to your location.
    usage: /setspawn
    permission: denizen.essentials.admin.setspawn
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - adjust <player.world> spawn_location:<player.location>

dessentials_command_setwarp:
    type: command
    debug: false
    name: setwarp
    description: Sets a teleport point at your current location.
    usage: /setwarp <&lt>name<&gt>
    permission: denizen.essentials.admin.setwarp
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - if <context.args.size> != 1 {
      - narrate "<&c>/setwarp <&lt>name<&gt>"
      - queue clear
      }
    - if <context.args.get[1].is[!=].to[<context.args.get[1].escaped>]> {
      - narrate "<&c>Simple (alphanumeric) warp names only please."
      - queue clear
      }
    - define existing <server.flag[dessentials.warps.<context.args.get[1]>]||null>
    - if %existing% != null {
      - narrate "<&c>Warning<&co> Override existing warp (at location<&co> <&b><def[existing].simple><&c>)"
      }
    - flag server dessentials.warps.<context.args.get[1]>:<player.location>
    - narrate "<&2>Set warp <&b><context.args.get[1]><&2> at <&b><player.location.simple><&2>!"

dessentials_command_warp:
    type: command
    debug: false
    name: warp
    description: Warps to a given teleport point, or shows a list.
    usage: /warp [name]
    permission: denizen.essentials.user.warp
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only. (Coming soon: /warp [name] [player])"
      - queue clear
      }
    - if <context.args.size> != 1 {
      - narrate "Warp list coming soon!"
      - queue clear
      }
    - if <context.args.get[1].is[!=].to[<context.args.get[1].escaped>]> {
      - narrate "<&c>Simple (alphanumeric) warp names only please."
      - queue clear
      }
    - define existing <server.flag[dessentials.warps.<context.args.get[1]>]||null>
    - if %existing% == null {
      - narrate "<&c>Unknown warp name."
      - queue clear
      }
    # TODO: Delay option, price option
    - narrate "<&6>Teleporting..."
    - teleport <player> %existing%
# dEssentials: Things a servers needs in one easy package!
# --- UTILITY: Functionality not contained within a command.
# See dEssentials-Core.yml for information

dessentials_utility_signcolor:
    type: world
    debug: false
    events:
        on player changes sign:
        - if <player.has_permission[denizen.essentials.utility.signcolor]||<player.is_op>> {
          - determine <context.new.replace[regex:&([0-9a-fA-Flk-oK-OrR])].with[<red.substring[1,1]>$1]>
          }

dessentials_utility_chatcolor:
    type: world
    debug: false
    events:
        on player chats:
        - if <player.has_permission[denizen.essentials.utility.chatcolor]||<player.is_op>> {
          - determine <context.message.replace[regex:&([0-9a-fA-Flk-oK-OrR])].with[<red.substring[1,1]>$1]>
          }
